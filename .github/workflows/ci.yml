name: tokamak-neutron-source-ci

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python and hatch
        uses: Fusion-Power-Plant-Framework/fppf-actions/setup-hatch@main
        with:
          python-version: "3.11"

      - name: Lint
        uses: Fusion-Power-Plant-Framework/fppf-actions/hatch-lint@main

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python and hatch
        uses: Fusion-Power-Plant-Framework/fppf-actions/setup-hatch@main
        with:
          python-version: "3.11"

      - name: Test docs build
        run: hatch run docs:build --strict

  pytest:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python and hatch
        uses: Fusion-Power-Plant-Framework/fppf-actions/setup-hatch@main
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run pytest
        run: hatch run test.py${{ matrix.python-version }}:tests-cov

  pytest-optional:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python and hatch
        uses: Fusion-Power-Plant-Framework/fppf-actions/setup-hatch@main
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run pytest
        run: hatch run test_optional.py${{ matrix.python-version }}:tests-cov

  integration:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.11"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache conda
        id: cache-conda
        uses: actions/cache/restore@v4
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.PYTHON_VERSION }}-${{
            hashFiles('conda/environment.yml') }}

      - name: Install Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: "latest"
          auto-activate-base: true
          activate-environment: ""
          use-only-tar-bz2: false
          conda-remove-defaults: true

      - name: Install hatch conda
        shell: bash -l {0}
        run: pip install hatch-conda hatch click!=8.3.0

      - name: Run pytest
        shell: bash -l {0}
        run: hatch run tns_conda:tests

      - name: Freeze conda env
        shell: bash -l {0}
        run: |
          conda env export -n tns_conda > tns_${{ env.PYTHON_VERSION }}_${{ runner.os }}.yml

      - uses: actions/upload-artifact@v4
        with:
          name: tns_${{ env.PYTHON_VERSION }}_${{ runner.os }}.yml
          path: tns_${{ env.PYTHON_VERSION }}_${{ runner.os }}.yml
          overwrite: true

      - name: Save conda build cache
        uses: actions/cache/save@v4
        if: always() && steps.cache-conda.outputs.cache-hit != 'true'
        with:
          path: ~/conda_pkgs_dir
          key: ${{ steps.cache-conda.outputs.cache-primary-key }}
